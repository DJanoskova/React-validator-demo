{"version":3,"sources":["utils/validator.js","components/ToggleCode.js","examples/MaterialForm.js","data/MaterialFormCode.js","examples/NestedForm.js","data/NestedFormCode.js","examples/CustomForm.js","data/CustomFormCode.js","examples/ResettingForm.js","data/ResettingFormCode.js","examples/ErrorsForm.js","data/ErrorsFormCode.js","utils/validatorWithTooltip.js","examples/TooltipForm.js","App.js","index.js"],"names":["useFormInput","_ref","name","_ref$validation","validation","formData","values","setFormData","setValues","defaultInvalidAttr","handleError","formValue","dot","pick","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","isValid","setIsValid","_useState5","_useState6","isTouched","setIsTouched","_useState7","_useState8","isFocused","setIsFocused","_useState9","validationRules","handleValidation","useCallback","trimmedValidation","fields","keys","forEach","property","push","rule","options","length","replace","split","fieldName","field","_field$options","trim","validator","validate","useEffect","handleChange","_ref2","data","target","checked","newValue","type","includes","str","objectSpread","defineProperty","handleFocus","handleBlur","invalidAttr","onChange","onFocus","onBlur","useForm","defaultValues","arguments","undefined","error","_useState11","_useState12","_useState13","_useState14","mounted","setMounted","_useState15","_useState16","formErrors","setFormErrors","errors","index","findIndex","splice","useInput","ToggleCode","code","visible","setVisible","react_default","a","createElement","Fragment","Button_default","color","onClick","withStyles","marginTop","classes","_useForm","username","email","onSubmit","e","preventDefault","console","log","TextField_default","assign","fullWidth","label","className","disabled","variant","components_ToggleCode","count","user","JSON","stringify","CustomForm","age","another-attr","isRequired","isInt","min","ResettingForm","ErrorsForm","password","passwordVerification","isLength","equals","_ref$tooltip","tooltip","toConsumableArray","Set","helperText","App","examples_MaterialForm","NestedForm","examples_CustomForm","examples_ResettingForm","examples_ErrorsForm","TooltipForm","href","rel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.adffb9de.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport validator from 'validator';\nimport dot from 'dot-object';\n\nexport function useFormInput ({\n  name,\n  validation = '',\n  values: formData,\n  setValues: setFormData,\n  defaultInvalidAttr,\n  handleError\n}) {\n  const formValue = dot.pick(name, formData) || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const [validationRules] = useState(validation);\n\n  const handleValidation = useCallback(() => {\n    const isValid = validate(value, validationRules);\n    setIsValid(isValid);\n    handleError(name, isValid);\n  }, [setIsValid, validationRules, name, value, handleError]);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue, value, setValue, setIsFocused, setIsTouched]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation();\n  }, [handleValidation, name]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const { value, checked, type } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) data = dot.str(name, newValue, { ...formData });\n    else data = { ...formData, [name]: newValue };\n\n    setValue(newValue);\n    setFormData(data);\n  }, [setValue, formData, setFormData, name]);\n\n  const handleFocus = useCallback(() => {\n    setIsTouched(true);\n    setIsFocused(true);\n    handleValidation();\n  }, [setIsTouched, setIsFocused, handleValidation]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n  }, [setIsFocused]);\n\n  const showError = !isValid && isTouched && !isFocused;\n  const invalidAttr = showError ? defaultInvalidAttr : null;\n\n  return {\n    value,\n    name,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ...invalidAttr\n  };\n}\n\nexport function useForm (defaultValues, invalidAttr = { error: true }) {\n  const [values, setValues] = useState(defaultValues);\n  const [mounted, setMounted] = useState(false);\n  const [formErrors, setFormErrors] = useState([]);\n\n  const handleError = useCallback((name, isValid) => {\n    let errors = formErrors;\n    const index = errors.findIndex(error => error === name);\n\n    if (!isValid) {\n      if (index < 0) errors.push(name);\n    } else {\n      if (index > -1) errors.splice(index, 1);\n    }\n\n    setFormErrors(errors);\n  }, [formErrors]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const useInput = (name, validation) => useFormInput({\n    name,\n    validation,\n    values,\n    setValues,\n    defaultInvalidAttr: invalidAttr,\n    handleError\n  });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    errors: formErrors,\n    isValid: mounted && !formErrors.length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate (value, validation) {\n  const fields = [];\n\n  let trimmedValidation;\n  let validatingFields;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fields.push({\n          rule: property,\n          options: validation[property]\n        });\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return true;\n      trimmedValidation = validation.replace(/ /g, '');\n      validatingFields = trimmedValidation.split(',');\n      validatingFields.forEach(fieldName => {\n        fields.push({\n          rule: fieldName\n        });\n      });\n  }\n\n  let isValid = true;\n\n  fields.forEach(field => {\n    const { rule, options = null } = field;\n\n    switch (rule.trim()) {\n      case 'isRequired':\n        if (!value) isValid = false;\n        break;\n      default:\n        if (isValid) {\n          if (options) isValid = validator[rule](value, options);\n          else isValid = validator[rule](value);\n        }\n        break;\n    }\n  });\n\n  return isValid;\n}\n","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nconst ToggleCode = ({ code }) => {\n  const [visible, setVisible] = useState(false);\n  const toggleVisible = () => setVisible(!visible);\n\n  return (\n    <>\n      <Button color=\"secondary\" onClick={toggleVisible}>\n        {visible ? 'Hide' : 'Show'} code\n      </Button>\n      {visible && <pre>{code}</pre>}\n    </>\n  )\n};\n\nexport default ToggleCode;","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          {...useInput('username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={MaterialFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        {...useInput('username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport NestedFormCode from '../data/NestedFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <pre>{JSON.stringify(values, 0, 2)}</pre>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Count *\"\n          {...useInput('count', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          className={classes.marginTop}\n          {...useInput('user.username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('user.email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={NestedFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);\n","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Count *\"\n        {...useInput('count', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        className={classes.marginTop}\n        {...useInput('user.username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('user.email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`\n","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport CustomFormCode from '../data/CustomFormCode';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isRequired: true\n            })}\n          />\n\n          <label>E-mail</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail')}\n          />\n\n          <label>Age</label>\n          <input\n            type=\"text\"\n            {...useInput('age', {\n              isInt: {\n                min: 1\n              }\n            })}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={CustomFormCode} />\n    </>\n  )\n};\n\nexport default CustomForm;\n","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail')}\n        />\n\n        <label>Age</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            }\n          })}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default CustomForm;`","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ResettingFormCode from '../data/ResettingFormCode';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isRequired: true\n            })}\n          />\n\n          <label>E-mail *</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail, isRequired')}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={ResettingFormCode} />\n    </>\n  )\n};\n\nexport default ResettingForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default ResettingForm;`;","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ErrorsFormCode from '../data/ErrorsFormCode';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n\n      <ToggleCode code={ErrorsFormCode} />\n    </>\n  )\n};\n\nexport default ErrorsForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n    </>\n  )\n};\n\nexport default ErrorsForm;`;","import { useEffect, useState, useCallback } from 'react';\nimport validator from 'validator';\nimport dot from 'dot-object';\n\n/** errors outsourced outside of our hooks\n as we don't really need them in the state */\nlet formErrors = [];\n\nfunction handleError (name, isValid) {\n  if (!isValid) {\n    formErrors.push(name);\n  } else {\n    const index = formErrors.findIndex(error => error === name);\n    if (index > -1) formErrors.splice(index, 1);\n  }\n\n  formErrors = [...new Set(formErrors)];\n}\n\nexport function useFormInput ({\n  name,\n  validation = '',\n  tooltip = '',\n  values: formData,\n  setValues: setFormData,\n  defaultInvalidAttr\n}) {\n  const formValue = dot.pick(name, formData) || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const [validationRules] = useState(validation);\n\n  const handleValidation = useCallback(() => {\n    const isValid = validate(value, validationRules);\n    setIsValid(isValid);\n    handleError(name, isValid);\n  }, [setIsValid, validationRules, name, value]);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue, value, setValue, setIsFocused, setIsTouched]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation();\n  }, [handleValidation, name]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const { value, checked, type } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) data = dot.str(name, newValue, { ...formData });\n    else data = { ...formData, [name]: newValue };\n\n    setValue(newValue);\n    setFormData(data);\n  }, [setValue, formData, setFormData, name]);\n\n  const handleFocus = useCallback(() => {\n    setIsTouched(true);\n    setIsFocused(true);\n    handleValidation();\n  }, [setIsTouched, setIsFocused, handleValidation]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n  }, [setIsFocused]);\n\n  const showError = !isValid && isTouched && !isFocused;\n  const invalidAttr = showError ? defaultInvalidAttr : null;\n\n  return {\n    value,\n    name,\n    helperText: isFocused && tooltip ? tooltip : '',\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ...invalidAttr\n  };\n}\n\nexport function useForm (defaultValues, invalidAttr = { error: true }) {\n  const [values, setValues] = useState(defaultValues);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n\n    return () => {\n      formErrors = [];\n    };\n  }, []);\n\n  const useInput = (name, validation, tooltip) => useFormInput({\n    name,\n    validation,\n    tooltip,\n    values,\n    setValues,\n    defaultInvalidAttr: invalidAttr\n  });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    errors: formErrors,\n    isValid: mounted && !formErrors.length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate (value, validation) {\n  const fields = [];\n\n  let trimmedValidation;\n  let validatingFields;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fields.push({\n          rule: property,\n          options: validation[property]\n        });\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return true;\n      trimmedValidation = validation.replace(/ /g, '');\n      validatingFields = trimmedValidation.split(',');\n      validatingFields.forEach(fieldName => {\n        fields.push({\n          rule: fieldName\n        });\n      });\n  }\n\n  let isValid = true;\n\n  fields.forEach(field => {\n    const { rule, options = null } = field;\n\n    switch (rule.trim()) {\n      case 'isRequired':\n        if (!value) isValid = false;\n        break;\n      default:\n        if (isValid) {\n          if (options) isValid = validator[rule](value, options);\n          else isValid = validator[rule](value);\n        }\n        break;\n    }\n  });\n\n  return isValid;\n}\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { useForm } from '../utils/validatorWithTooltip';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"With custom text\"\n        {...useInput('withCustomText', 'isRequired', 'You\\'re focusing me now')}\n      />\n\n      <TextField\n        label=\"With custom text 2\"\n        {...useInput('withCustomText2', 'isRequired', 'And now it\\'s me for a change')}\n      />\n\n      <br />\n      <br />\n\n      <Button type=\"submit\" disabled={!isValid} color=\"primary\" variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default CustomForm;","import React from 'react';\nimport './index.css';\n\nimport MaterialForm from './examples/MaterialForm';\nimport NestedForm from './examples/NestedForm';\nimport CustomForm from './examples/CustomForm';\nimport ResettingForm from './examples/ResettingForm';\nimport ErrorsForm from './examples/ErrorsForm';\nimport TooltipForm from './examples/TooltipForm';\n\nconst App = () => (\n  <div className=\"container\">\n    <h3>Simple material form</h3>\n    <MaterialForm />\n\n    <h3>NEW - Nested values</h3>\n    <NestedForm />\n\n    <hr />\n\n    <h3>Form with custom error input class</h3>\n    <p>We're adding a <code>.has-error</code> class to the inputs. We're also adding\n      a <code>another-attr</code> attribute to show the possibility to add more error attributes.</p>\n    <CustomForm />\n\n    <hr />\n\n    <h3>Form that resets upon submitting</h3>\n    <p>Also resets <code>is-touched</code> and <code>is-focused</code> input properties</p>\n    <ResettingForm />\n\n    <hr />\n\n    <h3>List of invalid fields</h3>\n    <ErrorsForm />\n\n    <hr />\n\n    <h3>A demo of enhanced validator that shows helper text on hover</h3>\n    <TooltipForm />\n\n    <hr />\n\n    <div className=\"text-center\">\n      <a href=\"https://medium.com/@info_53938/how-i-tried-to-validate-react-forms-with-hooks-31634fc5385b\"\n        target=\"_blank\"\n        className=\"link\"\n        rel=\"noopener noreferrer\">\n        How I tried to validate React forms (with hooks) at Medium\n      </a>\n      <br />\n      <a href=\"https://github.com/DJanoskova/React-validator-demo\" target=\"_blank\" rel=\"noopener noreferrer\"\n        className=\"link\">\n        The source code at GitHub\n      </a>\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}