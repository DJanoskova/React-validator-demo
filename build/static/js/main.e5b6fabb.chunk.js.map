{"version":3,"sources":["utils/validator.js","components/ToggleCode.js","examples/MaterialForm.js","data/MaterialFormCode.js","examples/NestedForm.js","data/NestedFormCode.js","examples/CustomForm.js","data/CustomFormCode.js","examples/ResettingForm.js","data/ResettingFormCode.js","examples/ErrorsForm.js","data/ErrorsFormCode.js","utils/validatorWithTooltip.js","examples/TooltipForm.js","App.js","index.js"],"names":["formErrors","useFormInput","_ref","name","_ref$validation","validation","formData","values","setFormData","setValues","formValue","dot","pick","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","isValid","setIsValid","_useState5","_useState6","isTouched","setIsTouched","_useState7","_useState8","isFocused","setIsFocused","_useState9","validationRules","handleValidation","useCallback","trimmedValidation","fields","keys","forEach","property","push","rule","options","length","replace","split","fieldName","field","_field$options","trim","validator","validate","index","findIndex","error","splice","toConsumableArray","Set","handleError","useEffect","handleChange","_ref2","data","target","checked","newValue","type","includes","str","objectSpread","defineProperty","handleFocus","handleBlur","onChange","onFocus","onBlur","useForm","defaultValues","_useState11","_useState12","_useState13","_useState14","mounted","setMounted","useInput","errors","ToggleCode","code","visible","setVisible","react_default","a","createElement","Fragment","Button_default","color","onClick","withStyles","marginTop","classes","_useForm","username","email","onSubmit","e","preventDefault","console","log","TextField_default","assign","fullWidth","label","className","disabled","variant","components_ToggleCode","count","user","JSON","stringify","CustomForm","age","isEmpty","isInt","min","ResettingForm","isRequired","ErrorsForm","password","passwordVerification","isLength","equals","formHandler","_ref$tooltip","tooltip","defaultInvalidAttr","_formHandler","unmetRule","fieldsToValidate","unmetValidationRule","invalidAttr","helperText","arguments","undefined","errorHandler","_useState10","_formHandler2","_errorHandler","setErrors","App","examples_MaterialForm","NestedForm","examples_CustomForm","examples_ResettingForm","examples_ErrorsForm","TooltipForm","href","rel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e5b6fabb.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport validator from 'validator';\nimport dot from 'dot-object';\n\n/** errors outsourced outside of our hooks\n as we don't really need them in the state */\nlet formErrors = [];\n\nfunction handleError (name, isValid) {\n  if (!isValid) {\n    formErrors.push(name);\n  } else {\n    const index = formErrors.findIndex(error => error === name);\n    if (index > -1) formErrors.splice(index, 1);\n  }\n\n  formErrors = [...new Set(formErrors)];\n}\n\nexport function useFormInput({\n  name,\n  validation = '',\n  values: formData,\n  setValues: setFormData\n}) {\n  const formValue = dot.pick(name, formData) || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const [validationRules] = useState(validation);\n\n  const handleValidation = useCallback(() => {\n    const isValid = validate(value, validationRules);\n    setIsValid(isValid);\n    handleError(name, isValid);\n  }, [setIsValid, validationRules, name, value]);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue, value, setValue, setIsFocused, setIsTouched]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation();\n  }, [handleValidation, name]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const { value, checked, type } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) data = dot.str(name, newValue, { ...formData });\n    else data = { ...formData, [name]: newValue };\n\n    setValue(newValue);\n    setFormData(data);\n  }, [setValue, formData, setFormData, name]);\n\n  const handleFocus = useCallback(() => {\n    setIsTouched(true);\n    setIsFocused(true);\n    handleValidation();\n  }, [setIsTouched, setIsFocused, handleValidation]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n  }, [setIsFocused]);\n\n  return {\n    value,\n    name,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    error: !isValid && isTouched && !isFocused\n  };\n}\n\nexport function useForm (defaultValues) {\n  const [values, setValues] = useState(defaultValues);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n\n    return () => {\n      formErrors = [];\n    };\n  }, []);\n\n  const useInput = (name, validation) => useFormInput({\n    name,\n    validation,\n    values,\n    setValues\n  });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    errors: formErrors,\n    isValid: mounted && !formErrors.length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate(value, validation) {\n  const fields = [];\n\n  let trimmedValidation;\n  let validatingFields;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fields.push({\n          rule: property,\n          options: validation[property]\n        });\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return true;\n      trimmedValidation = validation.replace(/ /g, '');\n      validatingFields = trimmedValidation.split(',');\n      validatingFields.forEach(fieldName => {\n        fields.push({\n          rule: fieldName\n        });\n      });\n  }\n\n  let isValid = true;\n\n  fields.forEach(field => {\n    const { rule, options = null } = field;\n\n    switch (rule.trim()) {\n      case 'isRequired':\n        if (!value) isValid = false;\n        break;\n      default:\n        if (isValid) {\n          if (options) isValid = validator[rule](value, options);\n          else isValid = validator[rule](value);\n        }\n        break;\n    }\n  });\n\n  return isValid;\n}\n","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nconst ToggleCode = ({ code }) => {\n  const [visible, setVisible] = useState(false);\n  const toggleVisible = () => setVisible(!visible);\n\n  return (\n    <>\n      <Button color=\"secondary\" onClick={toggleVisible}>\n        {visible ? 'Hide' : 'Show'} code\n      </Button>\n      {visible && <pre>{code}</pre>}\n    </>\n  )\n};\n\nexport default ToggleCode;","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          {...useInput('username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={MaterialFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        {...useInput('username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport NestedFormCode from '../data/NestedFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <pre>{JSON.stringify(values, 0, 2)}</pre>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Count *\"\n          {...useInput('count', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          className={classes.marginTop}\n          {...useInput('user.username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('user.email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={NestedFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);\n","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Count *\"\n        {...useInput('count', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        className={classes.marginTop}\n        {...useInput('user.username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('user.email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`\n","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport CustomFormCode from '../data/CustomFormCode';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isEmpty: false\n            })}\n          />\n\n          <label>E-mail</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail')}\n          />\n\n          <label>Age</label>\n          <input\n            type=\"text\"\n            {...useInput('age', {\n              isInt: {\n                min: 1\n              }\n            })}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={CustomFormCode} />\n    </>\n  )\n};\n\nexport default CustomForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail')}\n        />\n\n        <label>Age</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            }\n          })}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default CustomForm;`","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ResettingFormCode from '../data/ResettingFormCode';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isRequired: true\n            })}\n          />\n\n          <label>E-mail *</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail, isRequired')}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={ResettingFormCode} />\n    </>\n  )\n};\n\nexport default ResettingForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default ResettingForm;`;","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ErrorsFormCode from '../data/ErrorsFormCode';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n\n      <ToggleCode code={ErrorsFormCode} />\n    </>\n  )\n};\n\nexport default ErrorsForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n    </>\n  )\n};\n\nexport default ErrorsForm;`;","import { useEffect, useState } from 'react';\nimport validator from 'validator';\n\nexport function useFormInput({\n  name,\n  formHandler,\n  validation = '',\n  tooltip = '',\n  handleError,\n  defaultInvalidAttr\n}) {\n  const [formData, setFormData] = formHandler;\n  const formValue = formData[name] || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  function handleValidation(value) {\n    const unmetRule = validate(value, validation);\n    setIsValid(!unmetRule);\n    handleError(name, unmetRule);\n  }\n\n  // initial validation\n  useEffect(() => {\n    handleValidation(value);\n  }, []);\n\n  // watch for external parent data changes in self\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation(value);\n  }, [value]);\n\n  // rewrite self and parent's value\n  function handleChange({ target }) {\n    let { value, type, checked } = target;\n    \n    const newValue = type === 'checkbox' ? checked : value;\n\n    setValue(value);\n    setFormData({\n      ...formData,\n      [name]: newValue\n    });\n  }\n\n  const handleFocus = () => {\n    if (!isTouched) setIsTouched(true);\n    setIsFocused(true);\n    handleValidation(value);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n  };\n\n  const showError = !isValid && isTouched && !isFocused;\n  const invalidAttr = showError ? defaultInvalidAttr : null;\n\n  return {\n    value,\n    name,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    helperText: isFocused && tooltip ? tooltip : '',\n    ...invalidAttr\n  };\n}\n\nexport function useForm(defaultValues, invalidAttr = { error: true }) {\n  const formHandler = useState(defaultValues);\n  const errorHandler = useState({});\n  const [mounted, setMounted] = useState(false);\n\n  const [values, setValues] = formHandler;\n  const [errors, setErrors] = errorHandler;\n\n  // initial mounted flag\n  useEffect(() => setMounted(true), []);\n\n  const handleError = (name, unmetRule) => {\n    if (!unmetRule) delete errors[name];\n    else errors[name] = unmetRule;\n    setErrors(errors);\n  };\n\n  const useInput = (name, validation, tooltip) =>\n    useFormInput({\n      name,\n      validation,\n      tooltip,\n      formHandler,\n      handleError,\n      defaultInvalidAttr: invalidAttr\n    });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    errors,\n    isValid: mounted && !Object.values(errors).length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate(value, validation) {\n  const fieldsToValidate = {};\n  let trimmedValidation;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fieldsToValidate[property] = validation[property]\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return null;\n\n      trimmedValidation = validation.replace(/ /g, '');\n      trimmedValidation.split(',').forEach(fieldName => {\n        fieldsToValidate[fieldName.trim()] = true;\n      });\n  }\n\n  // check whether we do need to validate at all\n  const isRequired = fieldsToValidate.isRequired || fieldsToValidate.isEmpty === false;\n  if (!value && !isRequired) return null;\n\n  let unmetValidationRule = null;\n  let isValid = true;\n\n  Object.keys(fieldsToValidate).forEach(rule => {\n    // don't proceed if we're already invalid\n    if (!isValid) return;\n\n    const options = fieldsToValidate[rule];\n\n    switch (rule) {\n      case 'isRequired':\n        if (!value) isValid = false;\n        break;\n\n      default:\n        switch (options) {\n          case true:\n          case null:\n            isValid = validator[rule](value);\n            break;\n          case false:\n            isValid = !validator[rule](value);\n            break;\n          default:\n            isValid = validator[rule](value, options);\n        }\n    }\n\n    if (!isValid) unmetValidationRule = rule;\n  });\n\n  return unmetValidationRule || null;\n}\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { useForm } from '../utils/validatorWithTooltip';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"With custom text\"\n        {...useInput('withCustomText', 'isRequired', 'You\\'re focusing me now')}\n      />\n\n      <TextField\n        label=\"With custom text 2\"\n        {...useInput('withCustomText2', 'isRequired', 'And now it\\'s me for a change')}\n      />\n\n      <br />\n      <br />\n\n      <Button type=\"submit\" disabled={!isValid} color=\"primary\" variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default CustomForm;","import React from 'react';\nimport './index.css';\n\nimport MaterialForm from './examples/MaterialForm';\nimport NestedForm from './examples/NestedForm';\nimport CustomForm from './examples/CustomForm';\nimport ResettingForm from './examples/ResettingForm';\nimport ErrorsForm from './examples/ErrorsForm';\nimport TooltipForm from './examples/TooltipForm';\n\nconst App = () => (\n  <div className=\"container\">\n    <h3>Simple material form</h3>\n    <MaterialForm />\n\n    <h3>NEW - Nested values</h3>\n    <NestedForm />\n\n    <hr />\n\n    <h3>Form with custom error input class</h3>\n    <p>We're adding a <code>.has-error</code> class to the inputs. We're also adding\n      a <code>another-attr</code> attribute to show the possibility to add more error attributes.</p>\n    <CustomForm />\n\n    <hr />\n\n    <h3>Form that resets upon submitting</h3>\n    <p>Also resets <code>is-touched</code> and <code>is-focused</code> input properties</p>\n    <ResettingForm />\n\n    <hr />\n\n    <h3>List of invalid fields</h3>\n    <ErrorsForm />\n\n    <hr />\n\n    <h3>A demo of enhanced validator that shows helper text on hover</h3>\n    <TooltipForm />\n\n    <hr />\n\n    <div className=\"text-center\">\n      <a href=\"https://medium.com/@info_53938/how-i-tried-to-validate-react-forms-with-hooks-31634fc5385b\"\n        target=\"_blank\"\n        className=\"link\"\n        rel=\"noopener noreferrer\">\n        How I tried to validate React forms (with hooks) at Medium\n      </a>\n      <br />\n      <a href=\"https://github.com/DJanoskova/React-validator-demo\" target=\"_blank\" rel=\"noopener noreferrer\"\n        className=\"link\">\n        The source code at GitHub\n      </a>\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}