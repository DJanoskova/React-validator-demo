{"version":3,"sources":["utils/validator.js","components/ToggleCode.js","examples/MaterialForm.js","data/MaterialFormCode.js","examples/NestedForm.js","data/NestedFormCode.js","examples/CheckboxGroupForm.js","data/CheckboxGroupFormCode.js","examples/CustomForm.js","data/CustomFormCode.js","examples/ResettingForm.js","data/ResettingFormCode.js","examples/ErrorsForm.js","data/ErrorsFormCode.js","utils/validatorWithTooltip.js","examples/TooltipForm.js","App.js","index.js"],"names":["useFormInput","_ref","name","_ref$validation","validation","formData","values","setFormData","setValues","defaultInvalidAttr","handleError","formValue","dot","pick","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","isValid","setIsValid","_useState5","_useState6","isTouched","setIsTouched","_useState7","_useState8","isFocused","setIsFocused","_useState9","validationRules","handleValidation","useCallback","trimmedValidation","fields","keys","forEach","property","push","rule","options","length","replace","split","fieldName","field","_field$options","trim","result","validator","validate","useEffect","handleChange","_ref2","data","target","checked","newValue","type","includes","override","str","objectSpread","defineProperty","handleFocus","handleBlur","invalidAttr","onChange","onFocus","onBlur","useForm","defaultValues","arguments","undefined","error","_useState13","_useState14","_useState15","_useState16","mounted","setMounted","_useState17","_useState18","formErrors","setFormErrors","errors","index","findIndex","splice","useInput","useCheckboxGroup","_ref3","hasValue","indexOf","_useState11","_useState12","setChecked","isChecked","_ref4","oldValue","concat","toConsumableArray","filter","v","useFormCheckboxGroup","ToggleCode","code","visible","setVisible","react_default","a","createElement","Fragment","Button_default","color","onClick","withStyles","marginTop","classes","_useForm","username","email","onSubmit","e","preventDefault","console","log","TextField_default","assign","fullWidth","label","className","disabled","variant","components_ToggleCode","count","user","JSON","stringify","CheckboxGroupForm","animals","CustomForm","age","another-attr","isRequired","isInt","min","ResettingForm","ErrorsForm","password","passwordVerification","isLength","equals","_ref$tooltip","tooltip","Set","helperText","App","examples_MaterialForm","NestedForm","examples_CheckboxGroupForm","examples_CustomForm","examples_ResettingForm","examples_ErrorsForm","TooltipForm","href","rel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fe7399e9.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport validator from 'validator';\nimport dot from 'dot-object';\n\nexport function useFormInput({\n  name,\n  validation = '',\n  values: formData,\n  setValues: setFormData,\n  defaultInvalidAttr,\n  handleError\n}) {\n  const formValue = dot.pick(name, formData) || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const [validationRules] = useState(validation);\n\n  const handleValidation = useCallback(() => {\n    const isValid = validate(value, validationRules);\n    setIsValid(isValid);\n    handleError(name, isValid);\n  }, [setIsValid, validationRules, name, value, handleError]);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue, value, setValue, setIsFocused, setIsTouched]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation();\n  }, [handleValidation, name]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const { value, checked, type } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) {\n      dot.override = true;\n      data = dot.str(name, newValue, { ...formData });\n    } else data = { ...formData, [name]: newValue };\n\n    setValue(newValue);\n    setFormData(data);\n  }, [setValue, formData, setFormData, name]);\n\n  const handleFocus = useCallback(() => {\n    setIsTouched(true);\n    setIsFocused(true);\n    handleValidation();\n  }, [setIsTouched, setIsFocused, handleValidation]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n  }, [setIsFocused]);\n\n  const showError = !isValid && isTouched && !isFocused;\n  const invalidAttr = showError ? defaultInvalidAttr : null;\n\n  return {\n    value,\n    name,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ...invalidAttr\n  };\n}\n\nexport function useFormCheckboxGroup({\n  name,\n  value,\n  values: formData,\n  setValues: setFormData\n}) {\n  const formValue = dot.pick(name, formData) || [];\n  const hasValue = formValue.indexOf(value) > -1;\n\n  const [checked, setChecked] = useState(hasValue);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    const isChecked = formValue.indexOf(value) > -1;\n    setChecked(isChecked)\n  }, [formValue, value]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const oldValue = dot.pick(name, formData) || [];\n    const { checked } = target;\n    let newValue;\n\n    const index = oldValue.indexOf(value);\n    if (checked && index < 0) {\n      newValue = [...oldValue, value]\n    } else if (!checked && index > -1) {\n      newValue = oldValue.filter(v => v !== value);\n    }\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) {\n      dot.override = true;\n      data = dot.str(name, newValue, { ...formData });\n    } else {\n      data = { ...formData, [name]: newValue };\n    }\n\n    setChecked(checked);\n    setFormData(data);\n  }, [value, formData, setFormData, name]);\n\n  return {\n    name,\n    checked,\n    onChange: handleChange\n  };\n}\n\nexport function useForm(defaultValues, invalidAttr = { error: true }) {\n  const [values, setValues] = useState(defaultValues);\n  const [mounted, setMounted] = useState(false);\n  const [formErrors, setFormErrors] = useState([]);\n\n  const handleError = useCallback((name, isValid) => {\n    let errors = formErrors;\n    const index = errors.findIndex(error => error === name);\n\n    if (!isValid) {\n      if (index < 0) errors.push(name);\n    } else {\n      if (index > -1) errors.splice(index, 1);\n    }\n\n    setFormErrors(errors);\n  }, [formErrors]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const useInput = (name, validation) => useFormInput({\n    name,\n    validation,\n    values,\n    setValues,\n    defaultInvalidAttr: invalidAttr,\n    handleError\n  });\n\n  const useCheckboxGroup = (name, value) => useFormCheckboxGroup({ name, values, setValues, value });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    useCheckboxGroup,\n    errors: formErrors,\n    isValid: mounted && !formErrors.length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate(value, validation) {\n  const fields = [];\n\n  let trimmedValidation;\n  let validatingFields;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fields.push({\n          rule: property,\n          options: validation[property]\n        });\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return true;\n      trimmedValidation = validation.replace(/ /g, '');\n      validatingFields = trimmedValidation.split(',');\n      validatingFields.forEach(fieldName => {\n        fields.push({\n          rule: fieldName\n        });\n      });\n  }\n\n  let isValid = true;\n\n  fields.forEach(field => {\n    const { rule, options = null } = field\n\n    switch (rule.trim()) {\n      case 'isRequired':\n        if (!value) isValid = false\n        break\n      default:\n        if (isValid) {\n          if (options !== null) {\n            let result\n            switch (options) {\n              case true:\n                result = validator[rule](value);\n                break\n              case false:\n                result = !validator[rule](value);\n                break\n              default:\n                result = validator[rule](value, options);\n            }\n            isValid = result\n          } else isValid = validator[rule](value);\n          break\n        }\n    }\n  });\n\n  return isValid;\n}\n","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nconst ToggleCode = ({ code }) => {\n  const [visible, setVisible] = useState(false);\n  const toggleVisible = () => setVisible(!visible);\n\n  return (\n    <>\n      <Button color=\"secondary\" onClick={toggleVisible}>\n        {visible ? 'Hide' : 'Show'} code\n      </Button>\n      {visible && <pre>{code}</pre>}\n    </>\n  )\n};\n\nexport default ToggleCode;","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          {...useInput('username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={MaterialFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    username: '',\n    email: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        {...useInput('username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport NestedFormCode from '../data/NestedFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <pre>{JSON.stringify(values, 0, 2)}</pre>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          fullWidth\n          label=\"Count *\"\n          {...useInput('count', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"Username *\"\n          className={classes.marginTop}\n          {...useInput('user.username', 'isRequired')}\n        />\n\n        <TextField\n          fullWidth\n          label=\"E-mail *\"\n          className={classes.marginTop}\n          {...useInput('user.email', 'isRequired, isEmail')}\n        />\n\n        <Button type=\"submit\"\n          disabled={!isValid}\n          color=\"primary\"\n          className={classes.marginTop}\n          variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n\n      <ToggleCode code={NestedFormCode} />\n    </>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);\n","export default `import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport MaterialFormCode from '../data/MaterialFormCode';\n\nconst styles = {\n  marginTop: {\n    marginTop: '1rem'\n  }\n};\n\nconst MaterialForm = ({ classes }) => {\n  const { values, useInput, isValid } = useForm({\n    count: '',\n    user: {\n      username: '',\n      email: ''\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Count *\"\n        {...useInput('count', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Username *\"\n        className={classes.marginTop}\n        {...useInput('user.username', 'isRequired')}\n      />\n\n      <TextField\n        fullWidth\n        label=\"E-mail *\"\n        className={classes.marginTop}\n        {...useInput('user.email', 'isRequired, isEmail')}\n      />\n\n      <Button type=\"submit\"\n        disabled={!isValid}\n        color=\"primary\"\n        className={classes.marginTop}\n        variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default withStyles(styles)(MaterialForm);`\n","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport CheckboxGroupFormCode from '../data/CheckboxGroupFormCode';\n\nconst CheckboxGroupForm = () => {\n  const defaultValues = {\n    animals: ['dog', 'cat']\n  };\n\n  const { values, useCheckboxGroup, isValid } = useForm(defaultValues);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div>\n          My animals:\n          <div className=\"form-checkbox-group\">\n            <label>\n              Dog\n              <input\n                type=\"checkbox\"\n                {...useCheckboxGroup('animals', 'dog')}\n              />\n            </label>\n            <label>\n              Cat\n              <input\n                type=\"checkbox\"\n                {...useCheckboxGroup('animals', 'cat')}\n              />\n            </label>\n            <label>\n              Guinea pig\n              <input\n                type=\"checkbox\"\n                {...useCheckboxGroup('animals', 'guineapig')}\n              />\n            </label>\n            <label>\n              Hamster\n              <input\n                type=\"checkbox\"\n                {...useCheckboxGroup('animals', 'hamster')}\n              />\n            </label>\n          </div>\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <pre>{JSON.stringify(values, null, 2)}</pre>\n\n      <ToggleCode code={CheckboxGroupFormCode} />\n    </>\n  )\n};\n\nexport default CheckboxGroupForm;\n","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst CheckboxGroupForm = () => {\n  const defaultValues = {\n    animals: ['dog', 'cat']\n  };\n\n  const { values, useCheckboxGroup, isValid } = useForm(defaultValues);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        My animals:\n        <div className=\"form-checkbox-group\">\n          <label>\n            Dog\n            <input\n              type=\"checkbox\"\n              {...useCheckboxGroup('animals', 'dog')}\n            />\n          </label>\n          <label>\n            Cat\n            <input\n              type=\"checkbox\"\n              {...useCheckboxGroup('animals', 'cat')}\n            />\n          </label>\n          <label>\n            Guinea pig\n            <input\n              type=\"checkbox\"\n              {...useCheckboxGroup('animals', 'guineapig')}\n            />\n          </label>\n          <label>\n            Hamster\n            <input\n              type=\"checkbox\"\n              {...useCheckboxGroup('animals', 'hamster')}\n            />\n          </label>\n        </div>\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default CheckboxGroupForm;`;\n","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport CustomFormCode from '../data/CustomFormCode';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isRequired: true\n            })}\n          />\n\n          <label>E-mail</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail')}\n          />\n\n          <label>Age</label>\n          <input\n            type=\"text\"\n            {...useInput('age', {\n              isInt: {\n                min: 1\n              }\n            })}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={CustomFormCode} />\n    </>\n  )\n};\n\nexport default CustomForm;\n","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error',\n    'another-attr': 'look-at-me'\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail')}\n        />\n\n        <label>Age</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            }\n          })}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default CustomForm;`","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ResettingFormCode from '../data/ResettingFormCode';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-body\">\n          <label>Username *</label>\n          <input\n            type=\"text\"\n            {...useInput('username', {\n              isRequired: true\n            })}\n          />\n\n          <label>E-mail *</label>\n          <input\n            type=\"text\"\n            {...useInput('email', 'isEmail, isRequired')}\n          />\n        </div>\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <ToggleCode code={ResettingFormCode} />\n    </>\n  )\n};\n\nexport default ResettingForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ResettingForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, setValues } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n    setValues({\n      username: '',\n      email: ''\n    })\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-body\">\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', {\n            isRequired: true\n          })}\n        />\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={!isValid}>\n        Submit\n      </button>\n    </form>\n  )\n};\n\nexport default ResettingForm;`;","import React from 'react';\n\nimport { useForm } from '../utils/validator';\nimport ToggleCode from '../components/ToggleCode';\nimport ErrorsFormCode from '../data/ErrorsFormCode';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n\n      <ToggleCode code={ErrorsFormCode} />\n    </>\n  )\n};\n\nexport default ErrorsForm;","export default `import React from 'react';\n\nimport { useForm } from '../utils/validator';\n\nconst ErrorsForm = () => {\n  const defaultValues = {\n    username: '',\n    email: '',\n    age: '',\n    password: '',\n    passwordVerification: ''\n  };\n  const customErrorAttribute = {\n    className: 'has-error'\n  };\n\n  const { values, useInput, isValid, errors } = useForm(defaultValues, customErrorAttribute);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n\n        <label>Username *</label>\n        <input\n          type=\"text\"\n          {...useInput('username', 'isRequired')}\n        />\n        {errors.username && <span>Username is required</span>}\n\n        <label>E-mail *</label>\n        <input\n          type=\"text\"\n          {...useInput('email', 'isEmail, isRequired')}\n        />\n\n        <label>Age *</label>\n        <input\n          type=\"text\"\n          {...useInput('age', {\n            isInt: {\n              min: 1\n            },\n            isRequired: true\n          })}\n        />\n\n        <label>Password * <span className=\"small\">min. 6 characters</span></label>\n        <input\n          type=\"password\"\n          {...useInput('password', {\n            isRequired: true,\n            isLength: {\n              min: 6\n            }\n          })}\n        />\n\n        <label>Password verification</label>\n        <input\n          type=\"password\"\n          {...useInput('passwordVerification', {\n            isRequired: true,\n            equals: values.password\n          })}\n        />\n\n        <button type=\"submit\" disabled={!isValid}>\n          Submit\n        </button>\n      </form>\n\n      <br />\n\n      You can check the errors object and the unmet criteria to create custom validation messages. Fill the form and\n      check how errors change.\n\n      <pre>{JSON.stringify(errors, null, 2)}</pre>\n    </>\n  )\n};\n\nexport default ErrorsForm;`;","import { useEffect, useState, useCallback } from 'react';\nimport validator from 'validator';\nimport dot from 'dot-object';\n\n/** errors outsourced outside of our hooks\n as we don't really need them in the state */\nlet formErrors = [];\n\nfunction handleError (name, isValid) {\n  if (!isValid) {\n    formErrors.push(name);\n  } else {\n    const index = formErrors.findIndex(error => error === name);\n    if (index > -1) formErrors.splice(index, 1);\n  }\n\n  formErrors = [...new Set(formErrors)];\n}\n\nexport function useFormInput ({\n  name,\n  validation = '',\n  tooltip = '',\n  values: formData,\n  setValues: setFormData,\n  defaultInvalidAttr\n}) {\n  const formValue = dot.pick(name, formData) || '';\n\n  const [value, setValue] = useState(formValue);\n  const [isValid, setIsValid] = useState(true);\n  const [isTouched, setIsTouched] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const [validationRules] = useState(validation);\n\n  const handleValidation = useCallback(() => {\n    const isValid = validate(value, validationRules);\n    setIsValid(isValid);\n    handleError(name, isValid);\n  }, [setIsValid, validationRules, name, value]);\n\n  // watch for external parent data changes\n  useEffect(() => {\n    if (value !== formValue) {\n      setValue(formValue);\n      setIsTouched(false);\n      setIsFocused(false);\n    }\n  }, [formValue, value, setValue, setIsFocused, setIsTouched]);\n\n  // validate on value change\n  useEffect(() => {\n    handleValidation();\n  }, [handleValidation, name]);\n\n  // rewrite self and parent's value\n  const handleChange = useCallback(({ target }) => {\n    const { value, checked, type } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n\n    // using dot helps us change nested values\n    let data;\n    const isNested = name.includes('.');\n    if (isNested) {\n      dot.override = true;\n      data = dot.str(name, newValue, { ...formData });\n    }\n    else data = { ...formData, [name]: newValue };\n\n    setValue(newValue);\n    setFormData(data);\n  }, [setValue, formData, setFormData, name]);\n\n  const handleFocus = useCallback(() => {\n    setIsTouched(true);\n    setIsFocused(true);\n    handleValidation();\n  }, [setIsTouched, setIsFocused, handleValidation]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n  }, [setIsFocused]);\n\n  const showError = !isValid && isTouched && !isFocused;\n  const invalidAttr = showError ? defaultInvalidAttr : null;\n\n  return {\n    value,\n    name,\n    helperText: isFocused && tooltip ? tooltip : '',\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ...invalidAttr\n  };\n}\n\nexport function useForm (defaultValues, invalidAttr = { error: true }) {\n  const [values, setValues] = useState(defaultValues);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n\n    return () => {\n      formErrors = [];\n    };\n  }, []);\n\n  const useInput = (name, validation, tooltip) => useFormInput({\n    name,\n    validation,\n    tooltip,\n    values,\n    setValues,\n    defaultInvalidAttr: invalidAttr\n  });\n\n  return {\n    values,\n    setValues,\n    useInput,\n    errors: formErrors,\n    isValid: mounted && !formErrors.length\n  };\n}\n\n/**\n * Returns either unmet rule, or null\n * @param value\n * @param validation\n * @returns {*}\n */\nexport function validate (value, validation) {\n  const fields = [];\n\n  let trimmedValidation;\n  let validatingFields;\n\n  switch (typeof validation) {\n    case 'object':\n      Object.keys(validation).forEach(property => {\n        fields.push({\n          rule: property,\n          options: validation[property]\n        });\n      });\n      break;\n\n    case 'string':\n    default:\n      if (!validation.length) return true;\n      trimmedValidation = validation.replace(/ /g, '');\n      validatingFields = trimmedValidation.split(',');\n      validatingFields.forEach(fieldName => {\n        fields.push({\n          rule: fieldName\n        });\n      });\n  }\n\n  let isValid = true;\n\n  fields.forEach(field => {\n    const { rule, options = null } = field;\n\n    switch (rule.trim()) {\n      case 'isRequired':\n        if (!value) isValid = false;\n        break;\n      default:\n        if (isValid) {\n          if (options) isValid = validator[rule](value, options);\n          else isValid = validator[rule](value);\n        }\n        break;\n    }\n  });\n\n  return isValid;\n}\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { useForm } from '../utils/validatorWithTooltip';\n\nconst CustomForm = () => {\n  const defaultValues = {\n    username: '',\n    email: ''\n  };\n\n  const { values, useInput, isValid } = useForm(defaultValues);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values)\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"With custom text\"\n        {...useInput('withCustomText', 'isRequired', 'You\\'re focusing me now')}\n      />\n\n      <TextField\n        label=\"With custom text 2\"\n        {...useInput('withCustomText2', 'isRequired', 'And now it\\'s me for a change')}\n      />\n\n      <br />\n      <br />\n\n      <Button type=\"submit\" disabled={!isValid} color=\"primary\" variant=\"contained\">\n        Submit\n      </Button>\n    </form>\n  )\n};\n\nexport default CustomForm;","import React from 'react';\nimport './index.css';\n\nimport MaterialForm from './examples/MaterialForm';\nimport NestedForm from './examples/NestedForm';\nimport CheckboxGroupForm from './examples/CheckboxGroupForm';\nimport CustomForm from './examples/CustomForm';\nimport ResettingForm from './examples/ResettingForm';\nimport ErrorsForm from './examples/ErrorsForm';\nimport TooltipForm from './examples/TooltipForm';\n\nconst App = () => (\n  <div className=\"container\">\n    <h3>Simple material form</h3>\n    <MaterialForm />\n\n    <h3>Nested values</h3>\n    <NestedForm />\n\n    <hr />\n\n    <h3>NEW - Checkbox group</h3>\n    <p>\n      Use the new function <code>useCheckboxGroup</code> from <code>useForm()</code> - the first argument is the\n      property <strong>name</strong> and the second is the checkbox <strong>value</strong>\n    </p>\n    <CheckboxGroupForm />\n\n    <hr />\n\n    <h3>Form with custom error input class</h3>\n    <p>We're adding a <code>.has-error</code> class to the inputs. We're also adding\n      a <code>another-attr</code> attribute to show the possibility to add more error attributes.</p>\n    <CustomForm />\n\n    <hr />\n\n    <h3>Form that resets upon submitting</h3>\n    <p>Also resets <code>is-touched</code> and <code>is-focused</code> input properties</p>\n    <ResettingForm />\n\n    <hr />\n\n    <h3>List of invalid fields</h3>\n    <ErrorsForm />\n\n    <hr />\n\n    <h3>A demo of enhanced validator that shows helper text on hover</h3>\n    <TooltipForm />\n\n    <hr />\n\n    <div className=\"text-center\">\n      <a href=\"https://medium.com/@info_53938/how-i-tried-to-validate-react-forms-with-hooks-31634fc5385b\"\n        target=\"_blank\"\n        className=\"link\"\n        rel=\"noopener noreferrer\">\n        How I tried to validate React forms (with hooks) at Medium\n      </a>\n      <br />\n      <a href=\"https://github.com/DJanoskova/React-validator-demo\" target=\"_blank\" rel=\"noopener noreferrer\"\n        className=\"link\">\n        The source code at GitHub\n      </a>\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}